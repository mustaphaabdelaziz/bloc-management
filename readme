# Syst√®me de Gestion de Bloc Op√©ratoire

Une application web compl√®te pour la gestion des activit√©s de bloc op√©ratoire, incluant la gestion des patients, chirurgiens, personnel m√©dical, mat√©riaux et le calcul automatique des honoraires.

## üöÄ Fonctionnalit√©s

### Gestion des Entit√©s

- **Patients** : Dossiers complets avec NIN, informations personnelles et historique
- **Chirurgiens** : Gestion des sp√©cialit√©s et types de contrats (allocation/pourcentage)
- **Personnel m√©dical** : Suivi des r√¥les et participations aux chirurgies
- **Mat√©riaux** : Gestion des stocks (consommables et mat√©riels patients)
- **Prestations** : Catalogue des interventions avec tarifs et dur√©es

### Gestion des Chirurgies

- Planification et suivi des interventions
- Gestion des statuts (planifi√©e, en cours, termin√©e, urgente)
- Calcul automatique des d√©passements de dur√©e
- Attribution du personnel m√©dical et mat√©riaux consomm√©s

### Calcul des Honoraires

#### M√©thode 1 : Allocation de salle d'op√©ration

```
Honoraires = Prix prestation HT - TVA - Mat√©riaux totaux - (Dur√©e √ó Taux horaire) + Frais d√©passement
```

#### M√©thode 2 : Pourcentage

```
Honoraires = (Prix prestation HT - TVA - Mat√©riaux patients) √ó Pourcentage chirurgien
```

### Rapports et Analyses

- Honoraires des chirurgiens par p√©riode
- Activit√© du personnel m√©dical
- Consommation et co√ªts des mat√©riaux
- Statistiques g√©n√©rales avec graphiques

## üõ†Ô∏è Technologies Utilis√©es

### Backend

- **Node.js** avec Express.js
- **MongoDB** avec Mongoose
- **EJS** pour le templating
- **Moment.js** pour la gestion des dates

### Frontend

- **Bootstrap 5.3** pour l'interface
- **Bootstrap Icons** pour les ic√¥nes
- **Chart.js** pour les graphiques
- **CSS personnalis√©** avec animations

## üì¶ Installation

### Pr√©requis

- Node.js (version 14 ou sup√©rieure)
- MongoDB (local ou cloud)
- Git

### √âtapes d'installation

1. **Cloner le repository**

```bash
git clone [url-du-repo]
cd operating-room-management
```

2. **Installer les d√©pendances**

```bash
npm install
```

3. **Configuration de l'environnement**

```bash
cp .env.example .env
```

4. **Configurer les variables d'environnement**
   √âditez le fichier `.env` :

```env
# Configuration base de donn√©es
MONGODB_URI=mongodb://localhost:27017/operating_room

# Configuration session
SESSION_SECRET=your-super-secret-key-here

# Configuration serveur
PORT=3000

# Configuration TVA
DEFAULT_TVA_RATE=0.19
```

5. **D√©marrer MongoDB**

```bash
# Si MongoDB est install√© localement
mongod

# Ou utiliser MongoDB Atlas (cloud)
# Remplacez MONGODB_URI par votre string de connexion Atlas
```

6. **Lancer l'application**

**En d√©veloppement :**

```bash
npm run dev
```

**En production :**

```bash
npm start
```

7. **Acc√©der √† l'application**
   Ouvrez votre navigateur et allez sur : `http://localhost:3000`

## üìÅ Structure du Projet

```
operating-room-management/
‚îú‚îÄ‚îÄ models/              # Mod√®les MongoDB
‚îÇ   ‚îú‚îÄ‚îÄ Patient.js
‚îÇ   ‚îú‚îÄ‚îÄ Surgeon.js
‚îÇ   ‚îú‚îÄ‚îÄ Surgery.js
‚îÇ   ‚îú‚îÄ‚îÄ Material.js
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ routes/              # Routes Express
‚îÇ   ‚îú‚îÄ‚îÄ index.js         # Dashboard
‚îÇ   ‚îú‚îÄ‚îÄ patients.js      # Gestion patients
‚îÇ   ‚îú‚îÄ‚îÄ surgeries.js     # Gestion chirurgies
‚îÇ   ‚îú‚îÄ‚îÄ reports.js       # Rapports
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ views/               # Templates EJS
‚îÇ   ‚îú‚îÄ‚îÄ layout.ejs       # Layout principal
‚îÇ   ‚îú‚îÄ‚îÄ dashboard.ejs    # Tableau de bord
‚îÇ   ‚îú‚îÄ‚îÄ patients/        # Vues patients
‚îÇ   ‚îú‚îÄ‚îÄ surgeries/       # Vues chirurgies
‚îÇ   ‚îî‚îÄ‚îÄ reports/         # Vues rapports
‚îú‚îÄ‚îÄ public/              # Fichiers statiques
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îî‚îÄ‚îÄ images/
‚îú‚îÄ‚îÄ app.js               # Serveur principal
‚îú‚îÄ‚îÄ package.json         # D√©pendances
‚îî‚îÄ‚îÄ README.md
```

## üéØ Utilisation

### 1. Configuration initiale

- Cr√©ez les sp√©cialit√©s m√©dicales dans `/specialties`
- Ajoutez les fonctions du personnel dans `/fonctions`
- Configurez le catalogue des prestations dans `/prestations`

### 2. Gestion des entit√©s

- **Ajoutez des patients** avec leurs informations personnelles
- **Cr√©ez des profils chirurgiens** avec leurs sp√©cialit√©s et types de contrats
- **Enregistrez le personnel m√©dical** avec leurs fonctions
- **G√©rez le stock de mat√©riaux** (consommables et mat√©riels patients)

### 3. Planification des chirurgies

- **Programmez une chirurgie** en s√©lectionnant patient, chirurgien et prestation
- **Assignez le personnel m√©dical** avec leurs r√¥les respectifs
- **Sp√©cifiez les mat√©riaux** qui seront consomm√©s
- **D√©finissez les horaires** et le statut de l'intervention

### 4. Suivi et calculs

- Les **honoraires sont calcul√©s automatiquement** selon le type de contrat
- Suivez les **chirurgies en temps r√©el** via le dashboard
- Consultez les **rapports d√©taill√©s** par p√©riode

## üìä Types de Rapports

### 1. Honoraires des Chirurgiens

- Filtrage par chirurgien et p√©riode
- D√©tail des interventions et calculs
- Total des honoraires par chirurgien

### 2. Activit√© du Personnel M√©dical

- Nombre de participations par personne
- R√¥les exerc√©s et fr√©quence
- Analyse de la charge de travail

### 3. Consommation des Mat√©riaux

- Co√ªts par mat√©riau et cat√©gorie
- √âvolution des stocks
- Mat√©riaux les plus consomm√©s

### 4. Statistiques G√©n√©rales

- R√©partition des chirurgies par statut
- Activit√© par sp√©cialit√©
- Dur√©es moyennes des interventions

## üîß Personnalisation

### Modification des calculs d'honoraires

√âditez la fonction `calculateSurgeonFees` dans `/routes/surgeries.js` :

```javascript
// Exemple d'ajout d'une commission administrative
if (surgeon.contractType === "percentage") {
  const netAmount = prestationPriceHT - tvAmount - totalPatientMaterialCost;
  const commission = netAmount * 0.05; // 5% de commission
  surgeonAmount =
    ((netAmount - commission) * (surgeon.percentageRate || 0)) / 100;
}
```

### Ajout de nouveaux champs

1. **Modifiez le mod√®le** dans `/models/`
2. **Mettez √† jour les vues** dans `/views/`
3. **Adaptez les routes** dans `/routes/`

### Personnalisation de l'interface

- **Couleurs et th√®mes** : √âditez `/public/css/custom.css`
- **Logo et branding** : Remplacez les √©l√©ments dans `/views/layout.ejs`
- **Graphiques** : Configurez Chart.js dans les vues de rapports

## üîê S√©curit√©

### Recommandations

- Changez le `SESSION_SECRET` en production
- Utilisez HTTPS en production
- Configurez les r√®gles de firewall MongoDB
- Sauvegardez r√©guli√®rement la base de donn√©es

### Sauvegarde

```bash
# Sauvegarde MongoDB
mongodump --db operating_room --out ./backup/

# Restauration
mongorestore ./backup/operating_room/
```

## üöÄ D√©ploiement

### Option 1: Serveur VPS/D√©di√©

1. **Installation sur le serveur**

```bash
# Cloner le projet
git clone [url-du-repo]
cd operating-room-management

# Installer Node.js et MongoDB
sudo apt update
sudo apt install nodejs npm mongodb

# Installer les d√©pendances
npm install --production

# Configurer les variables d'environnement
nano .env
```

2. **Configuration avec PM2 (recommand√©)**

```bash
# Installer PM2
npm install -g pm2

# Cr√©er fichier de configuration
cat > ecosystem.config.js << EOF
module.exports = {
  apps: [{
    name: 'operating-room-app',
    script: './app.js',
    instances: 'max',
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: 3000
    }
  }]
}
EOF

# Lancer l'application
pm2 start ecosystem.config.js
pm2 startup
pm2 save
```

3. **Configuration Nginx (proxy inverse)**

```nginx
server {
    listen 80;
    server_name votre-domaine.com;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}
```

### Option 2: Heroku

1. **Pr√©paration**

```bash
# Installer Heroku CLI
# Cr√©er un Procfile
echo "web: node app.js" > Procfile

# Git init si n√©cessaire
git init
git add .
git commit -m "Initial commit"
```

2. **D√©ploiement**

```bash
# Cr√©er app Heroku
heroku create nom-de-votre-app

# Ajouter MongoDB Atlas
heroku addons:create mongolab:sandbox

# Configurer variables d'environnement
heroku config:set SESSION_SECRET=votre-secret-tres-securise
heroku config:set NODE_ENV=production

# D√©ployer
git push heroku main

# Ouvrir l'app
heroku open
```

### Option 3: Docker

1. **Cr√©er Dockerfile**

```dockerfile
FROM node:16-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

EXPOSE 3000

USER node

CMD ["node", "app.js"]
```

2. **Cr√©er docker-compose.yml**

```yaml
version: "3.8"
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - MONGODB_URI=mongodb://mongo:27017/operating_room
      - SESSION_SECRET=your-secret-key
    depends_on:
      - mongo

  mongo:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
```

3. **Lancer avec Docker**

```bash
docker-compose up -d
```

## üì± API Endpoints

### Patients

- `GET /patients` - Liste des patients
- `POST /patients` - Cr√©er un patient
- `GET /patients/:id` - D√©tails d'un patient
- `PUT /patients/:id` - Modifier un patient
- `DELETE /patients/:id` - Supprimer un patient

### Chirurgies

- `GET /surgeries` - Liste des chirurgies
- `POST /surgeries` - Cr√©er une chirurgie
- `GET /surgeries/:id` - D√©tails d'une chirurgie
- `PUT /surgeries/:id` - Modifier une chirurgie
- `POST /surgeries/:id/calculate-fees` - Calculer les honoraires

### Rapports

- `GET /reports/surgeon-fees` - Honoraires chirurgiens
- `GET /reports/medical-staff-activity` - Activit√© personnel
- `GET /reports/material-consumption` - Consommation mat√©riaux
- `GET /reports/statistics` - Statistiques g√©n√©rales

## üîç D√©pannage

### Probl√®mes courants

**1. Erreur de connexion MongoDB**

```bash
# V√©rifier si MongoDB fonctionne
sudo systemctl status mongodb

# Red√©marrer MongoDB
sudo systemctl restart mongodb

# V√©rifier la string de connexion dans .env
```

**2. Port d√©j√† utilis√©**

```bash
# Trouver le processus utilisant le port 3000
lsof -ti:3000

# Tuer le processus
kill -9 $(lsof -ti:3000)

# Ou changer le port dans .env
PORT=3001
```

**3. Probl√®mes de permissions**

```bash
# Donner les bonnes permissions
chmod -R 755 .
sudo chown -R $USER:$USER .
```

**4. Erreurs de d√©pendances**

```bash
# Nettoyer et r√©installer
rm -rf node_modules package-lock.json
npm install
```

### Logs et monitoring

**Voir les logs avec PM2**

```bash
pm2 logs operating-room-app
pm2 monit
```

**Logs d'erreurs personnalis√©s**

```javascript
// Ajouter dans app.js
app.use((err, req, res, next) => {
  console.error(`${new Date().toISOString()} - Error: ${err.message}`);
  console.error(err.stack);
  res.status(500).render("error", { title: "Erreur", error: err });
});
```

## üß™ Tests

### Tests manuels

1. **Cr√©er des donn√©es de test**

   - Ajoutez quelques sp√©cialit√©s et fonctions
   - Cr√©ez 2-3 patients
   - Enregistrez 2 chirurgiens (un en allocation, un en pourcentage)
   - Ajoutez du personnel m√©dical
   - Cr√©ez quelques mat√©riaux

2. **Tester une chirurgie compl√®te**
   - Programmez une chirurgie
   - Ajoutez personnel et mat√©riaux
   - Calculez les honoraires
   - V√©rifiez les rapports

### Tests automatis√©s (optionnel)

```bash
# Installer les d√©pendances de test
npm install --save-dev mocha chai supertest

# Ajouter script dans package.json
"scripts": {
    "test": "mocha tests/**/*.js"
}
```

## üìà Optimisations

### Performance

- **Indexation MongoDB** : Ajoutez des index sur les champs fr√©quemment recherch√©s
- **Pagination** : Limitez le nombre d'√©l√©ments par page
- **Cache** : Impl√©mentez du cache pour les donn√©es statiques
- **CDN** : Utilisez un CDN pour les assets statiques

### Monitoring

```bash
# Installer monitoring
npm install --save express-rate-limit helmet compression

# Ajouter middleware s√©curit√©
const helmet = require('helmet');
const compression = require('compression');
app.use(helmet());
app.use(compression());
```

## ü§ù Contribution

### Guide de contribution

1. Forkez le projet
2. Cr√©ez une branche pour votre fonctionnalit√© (`git checkout -b feature/AmazingFeature`)
3. Commitez vos changements (`git commit -m 'Add some AmazingFeature'`)
4. Pushez vers la branche (`git push origin feature/AmazingFeature`)
5. Ouvrez une Pull Request

### Standards de code

- Utilisez ESLint pour la coh√©rence du code
- Documentez les nouvelles fonctionnalit√©s
- Testez vos changements avant de commit

## üìÑ Licence

Ce projet est sous licence MIT. Voir le fichier `LICENSE` pour plus de d√©tails.

## üìû Support

### Aide et documentation

- **Documentation** : Ce README et les commentaires dans le code
- **Issues** : Utilisez GitHub Issues pour signaler des bugs
- **Discussions** : GitHub Discussions pour les questions g√©n√©rales

### Contact

- **Email** : [votre-email@domaine.com]
- **GitHub** : [votre-username]

## üîÆ Roadmap

### Fonctionnalit√©s pr√©vues

- [ ] **Authentification utilisateurs** avec r√¥les et permissions
- [ ] **API REST compl√®te** avec documentation Swagger
- [ ] **Notifications temps r√©el** (WebSocket)
- [ ] **Export PDF/Excel** des rapports
- [ ] **Calendrier interactif** des chirurgies
- [ ] **Module de facturation** int√©gr√©
- [ ] **Gestion des rendez-vous** pr√©-op√©ratoires
- [ ] **Interface mobile** responsive am√©lior√©e
- [ ] **Int√©gration** avec syst√®mes hospitaliers (HL7/FHIR)
- [ ] **Tableau de bord temps r√©el** avec m√©triques avanc√©es

### Am√©liorations techniques

- [ ] Migration vers TypeScript
- [ ] Tests automatis√©s complets
- [ ] CI/CD avec GitHub Actions
- [ ] Containerisation compl√®te (Kubernetes)
- [ ] Syst√®me de cache Redis
- [ ] Monitoring avanc√© (Prometheus/Grafana)

---

## üéâ Remerciements

Merci d'utiliser notre syst√®me de gestion de bloc op√©ratoire ! Cette application a √©t√© con√ßue pour am√©liorer l'efficacit√© et la transparence dans la gestion des activit√©s chirurgicales.

Pour toute suggestion d'am√©lioration ou signalement de bug, n'h√©sitez pas √† contribuer au projet.

---

**D√©velopp√© avec ‚ù§Ô∏è pour les professionnels de sant√©**
